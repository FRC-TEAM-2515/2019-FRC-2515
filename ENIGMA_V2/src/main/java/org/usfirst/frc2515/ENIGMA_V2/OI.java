// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2515.ENIGMA_V2;

import org.usfirst.frc2515.ENIGMA_V2.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc2515.ENIGMA_V2.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton toggleManualDriveButton;
    public JoystickButton moveLiftUp;
    public JoystickButton moveLiftDown;
    public JoystickButton resetLiftEncoderButton;
    public JoystickButton moveLiftToBottom;
    public JoystickButton moveLiftToLevel1;
    public JoystickButton stopLiftButton;
    public JoystickButton grabHatchPanelButton;
    public JoystickButton moveLiftToLevel2;
    public JoystickButton releaseHatchPanelButton;
    public JoystickButton toggleArmButton;
    public Joystick driverStick;
    public JoystickButton elevateChassisButton;
    public JoystickButton raiseFrontElevatorButton;
    public JoystickButton raiseRearElevatorButton;
    public Joystick copilotStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        copilotStick = new Joystick(1);
        
        raiseRearElevatorButton = new JoystickButton(copilotStick, 3);
        raiseRearElevatorButton.whenPressed(new raiseRearElevator());
        raiseFrontElevatorButton = new JoystickButton(copilotStick, 2);
        raiseFrontElevatorButton.whenPressed(new raiseFrontElevator());
        elevateChassisButton = new JoystickButton(copilotStick, 4);
        elevateChassisButton.whenPressed(new elevateChassis());
        driverStick = new Joystick(0);
        
        toggleArmButton = new JoystickButton(driverStick, 7);
        toggleArmButton.whenPressed(new toggleArm());
        releaseHatchPanelButton = new JoystickButton(driverStick, 2);
        releaseHatchPanelButton.whenPressed(new releaseHatchPanel());
        moveLiftToLevel2 = new JoystickButton(driverStick, 8);
        moveLiftToLevel2.whenPressed(new liftAuto(3));
        grabHatchPanelButton = new JoystickButton(driverStick, 1);
        grabHatchPanelButton.whenPressed(new grabHatchPanel());
        stopLiftButton = new JoystickButton(driverStick, 11);
        stopLiftButton.whenPressed(new stopLift());
        moveLiftToLevel1 = new JoystickButton(driverStick, 10);
        moveLiftToLevel1.whenPressed(new liftAuto(.6));
        moveLiftToBottom = new JoystickButton(driverStick, 12);
        moveLiftToBottom.whenPressed(new liftAuto(0));
        resetLiftEncoderButton = new JoystickButton(driverStick, 6);
        resetLiftEncoderButton.whenPressed(new resetLiftEncoder());
        moveLiftDown = new JoystickButton(driverStick, 4);
        moveLiftDown.whileHeld(new liftManual(-.25));
        moveLiftUp = new JoystickButton(driverStick, 3);
        moveLiftUp.whileHeld(new liftManual(.25));
        toggleManualDriveButton = new JoystickButton(driverStick, 5);
        toggleManualDriveButton.whenPressed(new toggleManualDrive());


        // SmartDashboard Buttons
        SmartDashboard.putData("emergencyReset", new emergencyReset());
        SmartDashboard.putData("grabHatchPanel", new grabHatchPanel());
        SmartDashboard.putData("releaseHatchPanel", new releaseHatchPanel());
        SmartDashboard.putData("toggleManualDrive", new toggleManualDrive());
        SmartDashboard.putData("liftAuto: hatchLevel2", new liftAuto(3));
        SmartDashboard.putData("liftAuto: hatchLevel1", new liftAuto(.6));
        SmartDashboard.putData("liftAuto: bottom", new liftAuto(0));
        SmartDashboard.putData("liftManual: up", new liftManual(.25));
        SmartDashboard.putData("liftManual: down", new liftManual(-.25));
        SmartDashboard.putData("resetLiftEncoder", new resetLiftEncoder());
        SmartDashboard.putData("stopLift", new stopLift());
        SmartDashboard.putData("toggleArm", new toggleArm());
        SmartDashboard.putData("elevateChassis", new elevateChassis());
        SmartDashboard.putData("raiseFrontElevator", new raiseFrontElevator());
        SmartDashboard.putData("raiseRearElevator", new raiseRearElevator());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriverStick() {
        return driverStick;
    }

    public Joystick getcopilotStick() {
        return copilotStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

