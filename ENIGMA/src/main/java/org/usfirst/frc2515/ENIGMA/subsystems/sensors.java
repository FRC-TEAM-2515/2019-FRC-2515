// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2515.ENIGMA.subsystems;


import org.usfirst.frc2515.ENIGMA.Robot;
import org.usfirst.frc2515.ENIGMA.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.smartdashboard.*;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class sensors extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DigitalInput rightLineSensor;
    private DigitalInput leftLineSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Timer lineDetectionTimer;
    public boolean isLineDetectionTimerStarted;
    public double lineDetectedStart = 0.0;
    public static double secondsBeforeAutoEngaged;
    public double delayAutoPilot;

    public sensors() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        rightLineSensor = new DigitalInput(0);
        addChild("rightLineSensor",rightLineSensor);
        
        
        leftLineSensor = new DigitalInput(1);
        addChild("leftLineSensor",leftLineSensor);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        lineDetectionTimer = new Timer();
        isLineDetectionTimerStarted = false;
        secondsBeforeAutoEngaged = 1.0;
        delayAutoPilot = 0.0;
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        SmartDashboard.putNumber("Line Timer", lineDetectionTimer.get());
        SmartDashboard.putBoolean("Line Detected", isLineDetected());

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isLineDetected(){

        if (!Robot.isAutoPilotDisabled && leftLineSensor.get() || rightLineSensor.get()){

            if(!isLineDetectionTimerStarted){

                lineDetectionTimer.start();

                isLineDetectionTimerStarted = true;

            }

            if(lineDetectionTimer.get() >= secondsBeforeAutoEngaged){

                Robot.isAutoPilotEngaged = true;

            }

            return true;
        }

        Robot.isAutoPilotEngaged = false;
        lineDetectionTimer.stop();
        isLineDetectionTimerStarted = false;
        lineDetectionTimer.reset();

        return false;
    }
    public double traceLine(){
        Double turn;
        turn = 0.0;
        // int line[];
        // line = new int[2];
        // line[0] = leftLineSensor.get() ? 1 : 0;
        // line[1] = rightLineSensor.get() ? 1 : 0;
        String line;
        
        line = Integer.toString(leftLineSensor.get() ? 1 : 0);
        line = line.concat(Integer.toString(rightLineSensor.get() ? 1: 0));
        SmartDashboard.putString("Line", line);
        switch(line){
            case "10":
                turn = .20;
                // robot needs slight right turn
            case "01":
                turn = -.20;
                // robot needs slight left turn
            case "11":
                turn = 0.0;
                // robot is straight
            case "00":
                turn = 0.0;
                Robot.isAutoPilotEngaged = false;
        }
        SmartDashboard.putNumber("Turn", turn);
        return turn;
    }
}

