// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2515.ENIGMA;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.WaitCommand;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.*;
import org.usfirst.frc2515.ENIGMA.commands.*;
import org.usfirst.frc2515.ENIGMA.subsystems.*;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.cameraserver.CameraServer;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static driveTrain driveTrain;
    public static intake intake;
    public static sensors sensors;
    public static power power;
    public static pnuematics pnuematics;
    public static elevateDriveTrain elevateDriveTrain;
    public static lift lift;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static boolean autoPilotEnabled;
    public static boolean autoPilotEngaged;
    public static boolean cargoLoaded;
    public static boolean hatchPanelLoaded;
    public static double accelerateMultiplier;


    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new driveTrain();
        intake = new intake();
        sensors = new sensors();
        SmartDashboard.putData(sensors);
        power = new power();
        pnuematics = new pnuematics();
        elevateDriveTrain = new elevateDriveTrain();
        lift = new lift();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        autoPilotEnabled = true;
        autoPilotEngaged = false;
        cargoLoaded = false;
        hatchPanelLoaded = false;
        Robot.pnuematics.startCompressor();

        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        
        SmartDashboard.putBoolean("Auto Pilot Enabled", autoPilotEnabled);
        SmartDashboard.putBoolean("Auto Pilot Engaged", autoPilotEngaged);
        SmartDashboard.putBoolean("Cargo Loaded", cargoLoaded);
        SmartDashboard.putBoolean("Panel Loaded", hatchPanelLoaded);
        //CameraServer.getInstance().startAutomaticCapture();
        SmartDashboard.putNumber("Lift Position", Robot.lift.getPosition());

    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
        Robot.autoPilotEnabled = false;
        Robot.autoPilotEngaged = false;
        Robot.driveTrain.stop();
        Robot.elevateDriveTrain.stop();
        Robot.intake.stop();
        Robot.lift.setSetpoint(0);
        Robot.pnuematics.dropChassis();
        Robot.pnuematics.stopCompressor();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        operatorControl();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        operatorControl();
    }

    public void operatorControl(){
        accelerateMultiplier = (Robot.oi.driverStick.getRawAxis(3) + 3) * .25;
        SmartDashboard.putNumber("Accelerate Multiplier", accelerateMultiplier);
        SmartDashboard.putNumber("Raw Drag", Robot.oi.driverStick.getRawAxis(3));
        SmartDashboard.putBoolean("Auto Pilot Engaged", autoPilotEngaged);
        SmartDashboard.putBoolean("Auto Pilot Enabled", autoPilotEnabled);
        SmartDashboard.putBoolean("Cargo Loaded", cargoLoaded);
        SmartDashboard.putBoolean("Panel Loaded", hatchPanelLoaded);
        SmartDashboard.putNumber("Lift Position", Robot.lift.getPosition());

        if (autoPilotEnabled && autoPilotEngaged && !Robot.sensors.isWallDetected()) {
            Robot.driveTrain.autoFollowLine();
        } else {
            Robot.driveTrain.operatorDrive();
        }
    }

    public void test(){
        Robot.pnuematics.startCompressor();
        Robot.intake.start();
        Timer.delay(5);
        Robot.intake.stop();
        Robot.lift.enable();
        Robot.lift.setSetpoint(25);
        Robot.lift.setSetpoint(-25);
        Robot.lift.disable();
        Timer.delay(5);
        Robot.pnuematics.ejectHatchPanel();
        Robot.pnuematics.elevateChassis();
        Timer.delay(5);
        Robot.pnuematics.dropChassis();
    }
}
