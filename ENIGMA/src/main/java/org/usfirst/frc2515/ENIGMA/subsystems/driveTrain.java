// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2515.ENIGMA.subsystems;


import org.usfirst.frc2515.ENIGMA.Robot;
import org.usfirst.frc2515.ENIGMA.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftDriveTalon;
    private WPI_TalonSRX rightDriveTalon;
    private DifferentialDrive diffDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftDriveTalon = new WPI_TalonSRX(1);
        
        
        
        rightDriveTalon = new WPI_TalonSRX(2);
        
        
        
        diffDrive = new DifferentialDrive(leftDriveTalon, rightDriveTalon);
        addChild("diffDrive",diffDrive);
        diffDrive.setSafetyEnabled(true);
        diffDrive.setExpiration(0.1);
        diffDrive.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftDriveTalon.configFactoryDefault();
        rightDriveTalon.configFactoryDefault();
        leftDriveTalon.setInverted(false); 
        rightDriveTalon.setInverted(true);
        leftDriveTalon.setSensorPhase(true);
        rightDriveTalon.setSensorPhase(true);
        diffDrive.setRightSideInverted(false);
        SmartDashboard.putNumber("Left Drive Encoder", leftDriveTalon.getSelectedSensorPosition());
        SmartDashboard.putNumber("Right Drive Encoder", rightDriveTalon.getSelectedSensorPosition());
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void drive(){
        double forward = -1 * Robot.oi.driverStick.getRawAxis(1); /* positive is forward */
        double turn = +1 * Robot.oi.driverStick.getRawAxis(2); /* positive is right */
        /* deadband gamepad 10% */
        if (Math.abs(forward) < 0.10) {
            forward = 0;
        }
        if (Math.abs(turn) < 0.10) {
            turn = 0;
        }
        SmartDashboard.putNumber("Left Drive Encoder", leftDriveTalon.getSelectedSensorPosition());
        SmartDashboard.putNumber("Right Drive Encoder", rightDriveTalon.getSelectedSensorPosition());
        diffDrive.arcadeDrive(forward*Robot.accelerateMultiplier, turn*Robot.accelerateMultiplier);
    }
    public void autoDrive(){
        diffDrive.arcadeDrive(.25, 0);
    }
    public void autoDriveStraight(){
        diffDrive.arcadeDrive(.25, 0);
    }
    public void autoDriveTurn(){

    }
    public void stop(){
        diffDrive.stopMotor();
    }

}

